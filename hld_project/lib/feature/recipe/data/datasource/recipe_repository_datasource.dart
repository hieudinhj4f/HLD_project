import 'package:cloud_firestore/cloud_firestore.dart';
// Gi·∫£ s·ª≠ b·∫°n c√≥ file generic n√†y
import '../../../../core/data/firebase_remote_datasource.dart';
// Import model c·ªßa Recipe
import '../model/recipe_model.dart';

/// üîπ H·ª£p ƒë·ªìng (abstract class) cho ngu·ªìn d·ªØ li·ªáu Recipe
abstract class RecipeRemoteDataSource {
  // ƒê√É TH√äM PH∆Ø∆†NG TH·ª®C getRecipes (C√ì L·ªåC)
  Future<List<RecipeModel>> getRecipes({String? category, String? searchQuery});

  Future<List<RecipeModel>> getAll();
  Future<RecipeModel?> getRecipe(String id);
  Future<void> add(RecipeModel recipe);
  Future<void> update(RecipeModel recipe);
  Future<void> delete(String id);
}

/// üîπ Tri·ªÉn khai (implementation) c·ªßa DataSource
class RecipeRemoteDataSourceImpl implements RecipeRemoteDataSource {
  final FirebaseRemoteDS<RecipeModel> _remoteSource;


  final FirebaseFirestore firestore;


  CollectionReference get _recipes => firestore.collection('recipes');


  RecipeRemoteDataSourceImpl(this.firestore)
      : _remoteSource = FirebaseRemoteDS<RecipeModel>(
    collectionName: 'recipes',
    fromFirestore: (doc) => RecipeModel.fromFirestore(doc),
    toFirestore: (model) => model.toJson(),
  );

  @override
  Future<List<RecipeModel>> getRecipes({String? category, String? searchQuery}) async {

    // 1. B·∫Øt ƒë·∫ßu v·ªõi collection
    Query query = _recipes;

    // 2. L·ªçc theo category (lu√¥n √°p d·ª•ng)
    if (category != null && category != 'T·∫•t c·∫£') {
      query = query.where('category', isEqualTo: category);
    }

    // 3. KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN (ƒê√ÇY L√Ä PH·∫¶N S·ª¨A)
    final bool isSearching = searchQuery != null && searchQuery.isNotEmpty;

    if (isSearching) {
      // üîπ N·∫æU NG∆Ø·ªúI D√ôNG T√åM KI·∫æM:
      // Ch·ªâ √°p d·ª•ng b·ªô l·ªçc T√äN
      // B·ªé s·∫Øp x·∫øp theo 'time' ƒë·ªÉ tr√°nh l·ªói Index
      query = query
          .where('name', isGreaterThanOrEqualTo: searchQuery)
          .where('name', isLessThanOrEqualTo: '$searchQuery\uf8ff');
    } else {
      // üîπ N·∫æU NG∆Ø·ªúI D√ôNG KH√îNG T√åM KI·∫æM:
      // Ch·ªâ s·∫Øp x·∫øp theo 'time'
      query = query.orderBy('time', descending: false);
    }

    final snapshot = await query.get();
    return snapshot.docs.map((doc) => RecipeModel.fromFirestore(doc)).toList();
  }
  // -----------------------------------------------------------------


  @override
  Future<List<RecipeModel>> getAll() async {
    // (H√†m n√†y v·∫´n d√πng l·ªõp generic b√¨nh th∆∞·ªùng)
    final recipes = await _remoteSource.getAll();
    return recipes;
  }

  @override
  Future<RecipeModel?> getRecipe(String id) async {
    final recipe = await _remoteSource.getById(id);
    return recipe;
  }

  @override
  Future<void> add(RecipeModel recipe) async {
    await _remoteSource.add(recipe);
  }

  @override
  Future<void> update(RecipeModel recipe) async {
    if (recipe.id == null) {
      throw Exception("Recipe ID kh√¥ng ƒë∆∞·ª£c null khi c·∫≠p nh·∫≠t");
    }
    await _remoteSource.update(recipe.id!, recipe);
  }

  @override
  Future<void> delete(String id) async {
    await _remoteSource.delete(id);
  }
}